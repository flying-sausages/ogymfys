#!/bin/bash

#############################################
###    GENERAL TIPS
#############################################

# Add an alias to your .bashrc, .zshrc or equivalent to make this script easier to trigger
# e.g. `echo 'alias ogymfys="/path/to/ogymfys/"' >> .bashrc`

# Add this script to your cron after you've made sure it works for you how you want and always have your music pulled down on its own!

# USE A KEY-BASED SSH AUTH TO THE SERVER
# Todo is to implement ssh-agent to pull in the key for you before the sync,
# but please do so manually before the dance please
# While I will try to update this code later with SSHFs support to go aroudn this,
# you will be asked for a password for every folder you want to have pulled down,
# due to rsync being called for every folder.

# For the rsyncSpeedLimit, in the case you're not the only netowrk user,
# I'd suggest leaving at least 200KB/s of the total line capacity for the others, ha!

# If you can't figure out what's going wrong, turn on some debugging options and reading the output BEFORE hittimg me up please!
# Include the full, CENSORED AND MANUALLY ANONYMISED output in a github issue/PM to me.

#############################################
###    Connection
#############################################
# define a hostname in your .ssh/config. use key-based authentication, with a password on top.
# You could also define this to be "user@host -p PORT -i /path/to/key"
remoteHost="server"
# path to remote directory that will be checked for new music
# Use a full path
remoteMusicDir="/home/user/Music/"
# Maximum transfer speed in KB/s over the internet (rsync only)
# Remember, 1KB/s = 8kbps. This would limit the download to 50MB/s, for example.
rsyncSpeedLimit=50000
# Location of SSH key to load to ssh-agent
# No keys will be loaded if none specified
sshKey=~/.ssh/id_rsa


#############################################
###    Local Folders & Backups
#############################################
# path where folders for queues will be created.
# This directory will be made for you in case it doesn't exist
localTempDir="/tmp/ogymfys"
# path where the folders with processed media will go
localDestDir=~/Music/destination/
# If you still want to keep a copy of the original, unprocessed data on the disk, set this to true.
# Setting this to false will delete all the downloaded version of the data and not keep a local backup
keepBackupsOfData=true
# Path which is checked for the last time data has been downloaded and backed up.
# The downloaded copies of files will be downloaded to this directory
# MAKE SURE THAT THE PATH IS PROPERLY POSIX ESCAPED
localBackupDir=~/Music/backup
# Change this to true if you have nothing in the download folder yet.
# Once you have something there, change it back to false
# This is necessary as we compare the last time something was added 
isBackupEmpty=false
# Date which to sync from in the event the backup folder is empty
dateToSyncFrom="Apr 20 1970 12:45"

#############################################
###    Transcoding flac options
#############################################
# Use false if you don't want to process FLACs
transcodeFlac=true
# Arguments to pass to ffmpeg for flac processing
# This argument can be left empty most of the time, unless you know what you need.
# For conversion to ALAC use "-acodec alac"
ffmpegFlacOptions="-acodec alac"
# For conversion to ALAC use ".m4a"
# For conversion to AIFF use ".aif"
# MAKE SURE TO INCLUDE THE DOT
ffmpegFlacNewExtension=".m4a"
# If you are transcoding to alac, artowkr won't transfer with ffmpeg, and this will fix it
# This will only actually trigger if ffmpegflacoptions contains the string 'alac'
ifAlacFixArtwork=true

#############################################
###    Technical limitations
#############################################
# The amount of parallel processes you want to run at the same time
threadsToUse=8
# Number of seconds to wait before moving a folder to the destination
# For example, some people care for having albums together when sorting their libraries by date added,
# which could confuse software which auto-imports from the destination directory
sleepBeforeMove=0



#############################################
###    Debugging options
#############################################
# Pauses function every time a major block is finished.
debugSTEPPING=false
# Prints some values of variables and expanded functions
debugVERBOSE=false
# If you don't want to do any file manipulation
debugDRYRUN=false

#############################################
###    TODO
#############################################
# SSHFS and Fuse don't currently work on WSL becuase M$FT = poop emoji.
# This isn't fully implemented yet, but check my ommented code if you wanna help out
#useSSHFs=false
# Long term TODO make sure this doesn't need to be declared by just automatically mounting all the time, whenever WSL supports FUSE
# MAKE SURE TO HAVE THE TRAILING / AFTER YOUR LOCAL DIRECTORIES
# path to local direcotry where the above directory will be accessible via
#localMountDir=/mnt/z/rtorrent/downloads/PTH/Seed